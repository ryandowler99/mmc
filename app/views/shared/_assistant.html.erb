<%= stylesheet_link_tag "assistant" %>

<div id="valuesBox" style="width: 250px; height: 100px; border: 2px solid purple; padding: 30px; position: fixed; right: 10; bottom:20;"> im a div after buttons </div>
<div id="valuesBox2" style="width: 250px; height: 100px; border: 2px solid lime; padding: 30px; position: fixed; right: 10; bottom:130;"> im a div after buttons </div>
<ul id="valuesBox3" style="width: 270px; height: 300px; border: 2px solid orange; padding: 15px; position: fixed; right: 10; bottom:250; overflow: auto;" >  </ul>

<input id="theNewButton2" type="button"> new button2 </input>
<input id="theOtherButton" type="button"> theOtherButton wong </input>
<input id="boomButton" type="button"> boom btn </input>
<hgroup id="assistantBubbleHint" class="speech-bubble col-md-2 visHidden">
	<h2>CSS speech bubbles made easy!</h2>
</hgroup>
<script type="text/javascript">
	$( document ).ready(function() {
		//alert("ready");
		//missed click
		var shortestDist = 10000;
		var closestElm = "---";
		var clickableElm = []; //holds clickable elements and their x & y pos 99 rename with s
		var count = 0; //

		//issue/error detection - page variables 
		var taskElems = ['theNewButton2', 'boomButton']; //holds the elements that need to be interacted with to do the pages's task (create budget etc)
		var numOfErrorsSoFar = 0;
		var numOfOrderErrors = 0; //tracks the humber of times user clicks a correct elm but in wrong order (user given feedback on this)

		//check for missed clicks & ux issues
		$(document).click(function(event) { 
			//does have id - tell issue detection func to see if its an elm user should be clicking to complete task
			if (event.target.id){
				var id = event.target.id;
				var numOfErrorsAllowed = 1; //number of errors that will be tolerated before executing
				//$('#valuesBox').text("id: " + event.target.id + "  ");
				checkForIssues(id, numOfErrorsAllowed, true); //check if clicked elm is one of the needed elms to complete the task at hand (int, int, boolean)
			}
			//missed click - if the clicked elm has no id (must be a miss click)
			if (!event.target.id){
				//alert("click on no id");
				$('#valuesBox').text("X: " + event.clientX + "  " + "Y:" + event.clientY);
				findClosestClickable(event.clientX, event.clientY); 
			}
		});

		/*  Missed clicks */

		//check dist beteen clickable elms and mouse click position
		function checkDist(elmId, x1,y1, x2, y2){
			//alert(4);
			var elm = $('#'+elmId);//construct a selector
			var elmWidth = elm.outerWidth();
			var elmHeight = elm.outerHeight();
			console.log(elmId + " x1: " + x1 + " y1: " + y1);
			var xDist = (x1 + elmWidth/2) - x2;
			var yDist = (y1 + elmHeight/2) - y2;
			var currentDist; //current one being iterated
			var distance = Math.sqrt( xDist*xDist + yDist*yDist ); //distance (float) between mouse and elm
			currentDist = distance;
			
			if(currentDist < shortestDist){
				shortestDist = currentDist;
				closestElm = elmId;
			}
			//return distance;
			return closestElm;
		}

		function getPosition( element ) {
			//alert(3);
		   var rect = element.getBoundingClientRect();
		   return {x:rect.left,y:rect.top};
		}

		//gets all clickable elements (buttons and soon links)
		function getClickableItems(){
			//alert(2);
			//reset variables for next use
			shortestDist = 10000; 
			closestElm = "---"; //999 dont think i need because checkDist returns closestClickable

			$(":button").each(function() {
				var $this = $(this); // 999 visit this link to talk about why u put this here and to comment here too -> https://stackoverflow.com/questions/36722979/this-offset-is-not-a-function-within-a-click-function
				//var pos = $this.offset(); //get position of elm (x,y) -- old way margin messes with
				var pos = getPosition( this );
				var theId = this.id.toString(); 

				//add clickable elem's id and position to the array (no blank values)
				if(theId){ clickableElm[clickableElm.length] = { id: theId, x: pos.x, y: pos.y}; }
				if(clickableElm[0]){
					//console.log("obj is  -   " + clickableElm[count].id + " x: " + clickableElm[count].x + " y: " + clickableElm[count].y  + "        |       len  " + clickableElm.length + "  count: " + count);
					//count ++;
					//alert(999);
				}
			});
			return clickableElm;
		}




		//compares an elements pos to mouse click pos
		function findClosestClickable(mouseX,mouseY){
			//alert(1);
			var clickableElms = getClickableItems(); //all page clickable elms 999 chnage to callback so executes in correct order
			//console.log("1: " + clickableElm[0].y);
			
			$.each(clickableElms , function (index, value){
				var x1 = clickableElm[index].x; //iterated elm x
				//var x1 = getPosition( clickableElm[index] );
				var y1 = clickableElm[index].y; //iterated elm y
				console.log(clickableElm.id + "- x is: " + x1 + " the y is: " + y1);
				var elmId = clickableElm[index].id;
				var closestClickable = checkDist(elmId, x1,y1, mouseX, mouseY); //check distance beteen the mouse xy and the current clickable being iterated	
			    console.log(" CLOSEST element is " + closestClickable + " - with a distance of: " + shortestDist);
				$('#valuesBox2').text("closest elm is " + closestElm + " and it was this far away: " + shortestDist );
				var textInBox3 = $('#valuesBox3').text();
				
				$('#valuesBox3').append('<li>' + elmId + " x: " + x1 + "  y " + y1 + '</li><br/>');
			});
			//do the callback list thoing so the funcs execute after the prev finnishes so the vals are def availible and stuff
			//reset array
			clickableElms.length = 0;
		}
		/*  ./ Missed clicks */
			




		/*  Error/issue detection */
		/* (used by checkForIssues func). Places a bubble near a specified element with a specified message
		and coordinates (bubble points to the elem & makes it pulse) */
		function elemPointerBubble(closestElm, closestElmPos, bubbleHeight, bubbleWidth, message){
			alert("your clicking the wrong elems - you must be lost, you first need to use: " + closestElm);
			var theMessage = message ? message : 'fallback message here that is generic';
			$("#assistantBubbleHint h2").text(theMessage)
				.parent().toggleClass('visHidden')
				.offset({ top: (closestElmPos['top'] - bubbleHeight*2 ),
							left: (closestElmPos['left'] - bubbleWidth*.3) });
			closestElm.toggleClass('pulse');
			//add event listener for btn 
			$(closestElm).click(function() {
				$(closestElm).unbind('click'); //remove event listener
				closestElm.toggleClass('pulse'); //stop pulsing 
				$("#assistantBubbleHint").toggleClass('visHidden'); //remove annotation bubble
			});	
		}
		//checks if the user is completing the main task of a screen (steps to create a budget etc)
		function checkForIssues(id, numOfErrorsAllowed, executeInOrder){ //int, int, boolean
			//stops code being ran after all task elems are used
			if(taskElems.length){
				//alert("recieved id: " + id + " and numOfErrorsAllowed = " + numOfErrorsAllowed);
				var ItemPosInArray = jQuery.inArray(id, taskElems); //give the pos (0 -> ..) of the elem IF its in there, otherwise it returns -1
				var closestElm = $('#'+ taskElems[0]);
				var closestElmPos = closestElm.offset(); // x & y
				var bubbleHeight = $('#assistantBubbleHint').height();
				var bubbleWidth = $('#assistantBubbleHint').width();
				var BubbleMessage = "default message to be changed";
				//clicked elem was a correct one (part of the task at hand)
				if(ItemPosInArray!== -1){
					//if order of execution is specified when callling func
					if(executeInOrder){
						//if its the correct elem (first in array)
						if(ItemPosInArray == 0){
							alert("Thats the one " + ItemPosInArray);
							taskElems.splice(ItemPosInArray, 1);
							$('#valuesBox').text("arry is: " + taskElems + "  ");
							numOfErrorsSoFar = 0; //reset error count after a sucessful click
						}
						//else - clicked elem was not the first one in array - so its noit the next to be clicked
						else{
							numOfOrderErrors++;
							alert("its in there alright " + ItemPosInArray + " but it needs to be clicked later. After this one at least: " + closestElm + " num of ordererro: " + numOfOrderErrors);
							$('#valuesBox').text("arry is still: " + taskElems + "  ");
						}
					//order doesnt matter	
					}else{
						//if the order does not matter
						alert(" order doesnt matter if statement - its in there alright " + ItemPosInArray);
						//taskElems.splice(ItemPosInArray, 1);
						//$('#valuesBox').text("arry is: " + taskElems + "  ");
						//numOfErrorsSoFar = 0; //reset error count after a sucessful click
					}
					//finally check the error count before providing a helper bubble
					if(numOfOrderErrors > numOfErrorsAllowed){
						numOfOrderErrors = 0;
						//make bubble apear near the corect elem and make that elem pulse visually
						elemPointerBubble(closestElm, closestElmPos, bubbleHeight, bubbleWidth, BubbleMessage);
					}
				//clicked elem was incorrect (NOT part of the task at hand)
				}else{
					$('#valuesBox').text("else arry is: " + taskElems + "  ");
					numOfErrorsSoFar ++; //record this error/issue
					alert("numOfErrorsSoFar" + numOfErrorsSoFar);
					
					//numOfErrorsAllowed instread of 1
					if(numOfErrorsSoFar > numOfErrorsAllowed){
						//make bubble apear near the corect elem and make that elem pulse visually
						elemPointerBubble(closestElm, closestElmPos, bubbleHeight, bubbleWidth, BubbleMessage);
					}
				}
			}
		}// checkForIssues func
	}); //doc ready
</script>